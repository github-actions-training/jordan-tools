name: Jordan-Tools CI

env:
  CONFIGURATION: Release
  MAJOR_RELEASE: 1
  PACKAGE_SUFFIX: development

on:
  workflow_call:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  dotnet-build:
    uses: github-actions-training/.github/.github/workflows/dotnet-build.yml@main
    with:
      artifact_name: artifact

  publish:
    runs-on: ubuntu-latest
    steps:
    # - name: Package artifact
    #   run: |
    #     dotnet pack \
    #     --include-source \
    #     --configuration ${{ env.CONFIGURATION }} \
    #     --no-restore \
    #     -o artifacts \
    #     -p:PackageVersion=${{ env.PACKAGE_VERSION }} \
    #     -p:SymbolPackageFormat=snupkg

    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: artifacts
    
    - name: Push to Github Packages
      run: dotnet nuget push 'artifacts/*.nupkg' --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"


  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Set Environment Variables
  #     run: |
  #       echo "PACKAGE_VERSION=${{ env.MAJOR_RELEASE }}.0.${{ github.run_number }}" >> $GITHUB_ENV

  #   - name: Set Environment Variables (Development)
  #     if: github.ref_name != 'master'
  #     run: |
  #       echo "PACKAGE_VERSION=${{ env.PACKAGE_VERSION }}-${{ env.PACKAGE_SUFFIX }}" >> $GITHUB_ENV

  #   - name: Setup .NET
  #     uses: actions/setup-dotnet@v2
  #     with:
  #       dotnet-version: 6.0.x

  #   - name: Authenticate to Github packages
  #     run: dotnet nuget add source --username USERNAME --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/github-actions-training/index.json"

  #   - name: Restore dependencies
  #     run: dotnet restore

  #   - name: Build
  #     run: dotnet build --no-restore --configuration ${{ env.CONFIGURATION }}

  #     # This step requires that coverlet.collector is added to test project
  #   - name: Test
  #     run: dotnet test --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx

  #   - name: Create code coverage report
  #     run: |
  #       dotnet tool install -g dotnet-reportgenerator-globaltool
  #       reportgenerator -reports:tests/**/coverage.cobertura.xml -targetdir:coverage -reporttypes:'Cobertura'

  #   - name: Code Coverage Summary Report
  #     uses: irongut/CodeCoverageSummary@v1.3.0
  #     with:
  #       filename: coverage/Cobertura.xml
  #       badge: true
  #       format: 'markdown'
  #       output: 'both'

  #   - name: Add Coverage PR Comment
  #     uses: marocchino/sticky-pull-request-comment@v2
  #     if: github.event_name == 'pull_request'
  #     with:
  #       recreate: true
  #       path: code-coverage-results.md

  #   - name: Package artifact
  #     # if: github.ref_name == 'master'
  #     run: |
  #       dotnet pack \
  #       --include-source \
  #       --configuration ${{ env.CONFIGURATION }} \
  #       --no-restore \
  #       -o artifacts \
  #       -p:PackageVersion=${{ env.PACKAGE_VERSION }} \
  #       -p:SymbolPackageFormat=snupkg
    
  #   - name: Push to Github Packages
  #     # if: github.ref_name == 'master'
  #     run: dotnet nuget push 'artifacts/*.nupkg' --api-key ${{ secrets.GITHUB_TOKEN }} --source "github"